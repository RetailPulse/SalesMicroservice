apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-rp-sales-app
  namespace: ns-retailpulse
data:
  application.yaml: |
    server:
      port: 8085

    auth:
      enabled: false
      origin: "http://localhost:30080" #"http://localhost:4200"
      jwt:
        key:
          set:
            uri: http://app-iam:8081/oauth2/jwks

    spring:
      datasource:
        url: jdbc:mysql://mysql-rp-sales:3306/RPSalesDB
        username: root
        password: password
        driver-class-name: com.mysql.cj.jdbc.Driver

      jpa:
        hibernate:
          ddl-auto: update
        database-platform: org.hibernate.dialect.MySQL8Dialect
        show-sql: true

      kafka:
        bootstrap-servers: localhost:30094 # kafka-service:9092 #  kafka-service.ns-retailpulse.svc.cluster.local:9092 # localhost:9092

        # --- Kafka Consumer Configuration ---
        consumer:
          enabled: true 
          topics:
            payment: "payment-events"
          group-ids: 
            payment: "sales-microservice-group"
          auto-offset-reset: earliest # latest
          value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          properties:
            spring.json.value.default.type: com.retailpulse.dto.PaymentEventDto
            spring.json.trusted.packages: "*"
            spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
            # spring.json.value.default.type: com.retailpulse.dto.PaymentEventDto
        #     # --- Existing Backoff Settings (keep or adjust as needed) ---
        #     retry.backoff.ms: 5000 # Note: Might be capped by retry.backoff.max.ms (default 1000)
        #     request.timeout.ms: 30000
        #     session.timeout.ms: 45000
        #     heartbeat.interval.ms: 5000
        #     # --- END Existing Backoff Settings ---

      # --- Actuator Health Configuration ---
      # Ensure Kafka health check is enabled so you can monitor its status.
      management:
        endpoint:
          health:
            show-details: always
        health:
          kafka:
            enabled: true
        
    inventory-service:
      url: http://svc-rp-inventory:8084
    
    payment-service:
      url: http://svc-rp-payment:8087 

    logging:
      level:
        root: INFO
        org:
          apache:
            kafka: INFO
          springframework:
            security: INFO # TRACE #
            kafka: INFO # DEBUG # 
        com.retailpulse: INFO # DEBUG # 
      file:
        name: logs/rp-sales.log

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-rp-sales
  namespace: ns-retailpulse
  labels:
    app: deploy-rp-sales  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deploy-rp-sales
  template:
    metadata:
      labels:
        app: deploy-rp-sales
    spec:
      initContainers:
        # Wait for MySQL Service to be reachable
        - name: wait-for-mysql
          image: busybox:1.35
          command:
            - sh
            - -c
            - >
              until nc -z mysql-rp-sales 3306; do
                echo "Waiting for MySQL at mysql-rp-sales:3306...";
                sleep 5;
              done;
              echo "MySQL is ready!";
          env:
            - name: MYSQL_HOST
              value: mysql-rp-sales
            - name: MYSQL_PORT
              value: "3306"
      containers:
      - image: docker.io/casperyap/rp-sales-app:v0.1.0 #docker.io/casperyap/
        name: app-rp-sales
        imagePullPolicy: Never # Always        
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        resources: {}
      volumes:
      - name: config-volume
        configMap:
          name: cm-rp-sales-app

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: deploy-rp-sales
  name: svc-rp-sales
spec:
  selector:
    app: deploy-rp-sales
  ports:
  - port: 8085
    protocol: TCP
    targetPort: 8085
    nodePort: 30085
  type: NodePort